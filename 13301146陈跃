package com.javaee.server;

import java.io.*;  
import java.util.*;  
import java.net.*;  
  
public class recieveServer {  
    final int RECEIVE_PORT = 3333; // 该服务器的端口号  
  
    // receiveServer的构造器  
    public recieveServer() {  
        ServerSocket rServer = null; // ServerSocket的实例  
        Socket request = null; // 用户请求的套接字  
        Thread receiveThread = null;  
        try {  
            rServer = new ServerSocket(RECEIVE_PORT); // 初始化ServerSocket  
            System.out.println("Welcome to the server!");  
            System.out.println(new Date());  
            System.out.println("The server is ready!");  
            System.out.println("Port: " + RECEIVE_PORT);  
            while (true) { // 等待用户请求  
                request = rServer.accept(); // 接收客户机连接请求  
                receiveThread = new serverThread(request); // 生成serverThread的实例  
                receiveThread.start();// 启动serverThread线程  
            }  
        } catch (IOException e) {  
            System.out.println(e.getMessage());  
        }  
    }  
  
    public static void main(String args[]) {  
        new recieveServer();  
    } // end of main  
  
} // end of class  
  
//类serverThread  
class serverThread extends Thread {  
  
    Socket clientRequest; // 用户连接的通信套接字  
    BufferedReader input; // 输入流  
    PrintWriter output; // 输出流  
    String message = null;
    String remessage = null;
  
    public serverThread(Socket s) { // serverThread的构造器  
        this.clientRequest = s; // 接收receiveServer传来的套接字  
        InputStreamReader reader;  
        OutputStreamWriter writer;  
        try { // 初始化输入、输出流  
            reader = new InputStreamReader(clientRequest.getInputStream());  
            writer = new OutputStreamWriter(clientRequest.getOutputStream());  
            input = new BufferedReader(reader);  
            output = new PrintWriter(writer, true);  
        } catch (IOException e) {  
            System.out.println(e.getMessage());  
        }  
        String message = null;
        String remessage = null;
        // 这里循环可以使服务器持续的接收客户端信息。read.readLine()通过输入流读取一段字符串，赋值给message变量，如果message字符串不为“exit”则循环，否则结束循环

        try {
			message = input.readLine();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
            // 将字符串前面添加“返回：”，再发回客户端
        	char[] charArray = message.toCharArray(); 
        	remessage = "";
            for (int i=charArray.length-1; i>=0; i--){ 
            	remessage += charArray[i]; 
            }
            output.println(remessage);
        
    }  
  
    public void run() { // 线程的执行方法  
        String command = null; // 用户指令  
        String str = null;  
        boolean done = false;  
        
  
        while (!done) {  
            try {  
                str = input.readLine(); // 接收客户机指令  
            } catch (IOException e) {  
                System.out.println(e.getMessage());  
            }
            
            command = str.trim().toUpperCase();  
    		
    		// 将字符串前面添加“返回：”，再发回客户端
    		char[] charArray = str.toCharArray(); 
    		remessage = "";
    		for (int i=charArray.length-1; i>=0; i--){ 
    			remessage += charArray[i]; 
    		}
    		output.println(remessage);
        }// end of while 
        try {  
            clientRequest.close(); // 关闭套接字  
        } catch (IOException e) {  
            System.out.println(e.getMessage());  
        }  
        command = null;  
    }// end of run  
}  
